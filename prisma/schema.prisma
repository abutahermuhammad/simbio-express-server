generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ambulance {
  id                                 Int           @id @unique @default(autoincrement())
  created_at                         DateTime      @default(now()) @db.Timestamptz(3)
  updated_at                         DateTime      @updatedAt @db.Timestamptz(3)
  vehicle_number                     String        @db.VarChar(10)
  ambulance_type                     String?       @db.VarChar(50)
  person_id                          Int
  version                            String        @default("v1") @db.VarChar
  organization                       Int?
  Organization                       Organization? @relation(fields: [organization], references: [id], map: "Ambulance_organizationId_fkey")
  Person                             Person        @relation(fields: [person_id], references: [id], map: "Ambulance_personId_fkey")
  Version_Ambulance_versionToVersion Version       @relation("Ambulance_versionToVersion", fields: [version], references: [slug], onDelete: NoAction)
}

model BloodCenter {
  id                                        Int       @id @unique @default(autoincrement())
  created_at                                DateTime  @default(now()) @db.Timestamptz(3)
  updated_at                                DateTime  @updatedAt @db.Timestamptz(3)
  established_at                            DateTime  @db.Timestamptz(3)
  version                                   String    @default("v1") @db.VarChar
  founder                                   Int?
  contact                                   Int?
  location                                  Int?
  Contact_BloodCenter_contactToContact      Contact?  @relation("BloodCenter_contactToContact", fields: [contact], references: [id], map: "BloodCenter_contactId_fkey")
  Person                                    Person?   @relation(fields: [founder], references: [id], onDelete: NoAction)
  Location                                  Location? @relation(fields: [location], references: [id], map: "BloodCenter_locationId_fkey")
  Version                                   Version   @relation(fields: [version], references: [slug], onDelete: NoAction)
  Contact_Contact_blood_centerToBloodCenter Contact[] @relation("Contact_blood_centerToBloodCenter")
}

model Club {
  id                                Int            @id @unique @default(autoincrement())
  created_at                        DateTime       @default(now()) @db.Timestamptz(3)
  updated_at                        DateTime       @updatedAt @db.Timestamptz(3)
  name                              String         @db.VarChar(255)
  established_at                    DateTime       @db.Timestamptz(6)
  contact                           Int
  version                           String         @default("v1") @db.VarChar
  chairman                          Int
  founder                           Int
  vice_chairman                     Int
  Person_Club_chairmanToPerson      Person         @relation("Club_chairmanToPerson", fields: [chairman], references: [id], map: "Club_chairman_id_fkey")
  Contact_Club_contactToContact     Contact        @relation("Club_contactToContact", fields: [contact], references: [id], map: "Club_contact_id_fkey")
  Person_Club_founderToPerson       Person         @relation("Club_founderToPerson", fields: [founder], references: [id], map: "Club_founder_id_fkey")
  Version                           Version        @relation(fields: [version], references: [slug], onDelete: NoAction)
  Person_Club_vice_chairmanToPerson Person         @relation("Club_vice_chairmanToPerson", fields: [vice_chairman], references: [id], map: "Club_vice_chairman_id_fkey")
  Contact_Contact_clubToClub        Contact[]      @relation("Contact_clubToClub")
  member_list                       Member[]
  Organization                      Organization[]
}

model Contact {
  id                                            Int           @id @unique @default(autoincrement())
  created_at                                    DateTime      @default(now()) @db.Timestamptz(3)
  updated_at                                    DateTime      @updatedAt @db.Timestamptz(3)
  address_line                                  String        @db.VarChar(255)
  address_line_1                                String?       @db.VarChar(255)
  state                                         String        @db.VarChar(32)
  city                                          String        @db.VarChar(32)
  zip                                           String        @db.VarChar(15)
  phone                                         String        @db.VarChar(15)
  phone_1                                       String?       @db.VarChar(15)
  fax                                           String?       @db.VarChar(15)
  email                                         String?       @db.VarChar(100)
  email_1                                       String?       @db.VarChar(100)
  website                                       String?       @db.VarChar(100)
  social_media                                  Json?
  version                                       String        @default("v1") @db.VarChar
  country                                       String?       @db.VarChar(2)
  person                                        Int?
  club                                          Int?
  blood_center                                  Int?
  donation                                      Int?
  hospital                                      Int?
  BloodCenter_BloodCenter_contactToContact      BloodCenter[] @relation("BloodCenter_contactToContact")
  Club_Club_contactToContact                    Club[]        @relation("Club_contactToContact")
  BloodCenter_Contact_blood_centerToBloodCenter BloodCenter?  @relation("Contact_blood_centerToBloodCenter", fields: [blood_center], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Contact_blood_center_id_fkey")
  Club_Contact_clubToClub                       Club?         @relation("Contact_clubToClub", fields: [club], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Contact_club_id_fkey")
  Country                                       Country?      @relation(fields: [country], references: [alpha_2], onDelete: Restrict, map: "Contact_country_id_fkey")
  Donation                                      Donation?     @relation(fields: [donation], references: [id], onDelete: NoAction, map: "Contact_donation_id_fkey")
  Hospital_Contact_hospitalToHospital           Hospital?     @relation("Contact_hospitalToHospital", fields: [hospital], references: [id], onDelete: NoAction, map: "Contact_hospital_id_fkey")
  Person_Contact_personToPerson                 Person?       @relation("Contact_personToPerson", fields: [person], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Contact_person_id_fkey")
  Version                                       Version       @relation(fields: [version], references: [slug], onDelete: NoAction)
  Hospital_Hospital_contactToContact            Hospital[]    @relation("Hospital_contactToContact")
  Person                                        Person[]
}

model Country {
  alpha_3    String    @id @db.VarChar(3)
  alpha_2    String    @unique @db.VarChar(2)
  numeric    String    @db.VarChar(3)
  name       String    @db.VarChar(100)
  version    String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  Contact    Contact[]
  Version    Version   @relation(fields: [version], references: [slug], onDelete: NoAction)

  @@unique([alpha_3, alpha_2, numeric, name])
}

model Location {
  id          Int           @id @unique @default(autoincrement())
  latitude    Float
  longitude   Float
  version     String        @default("v1") @db.VarChar
  created_at  DateTime?     @db.Timestamptz(6)
  updated_at  DateTime?     @db.Timestamptz(6)
  BloodCenter BloodCenter[]
  Hospital    Hospital[]
  Version     Version       @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model Donation {
  id           Int          @id @unique @default(autoincrement())
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  updated_at   DateTime     @updatedAt @db.Timestamptz(3)
  amount       Int          @default(0)
  donated_at   DateTime     @db.Timestamptz(3)
  version      String       @default("v1") @db.VarChar
  person       Int
  member       Int
  organization Int
  Contact      Contact[]
  Member       Member       @relation(fields: [member], references: [id], map: "Donation_memberId_fkey")
  Organization Organization @relation(fields: [organization], references: [id], map: "Donation_organizationId_fkey")
  Person       Person       @relation(fields: [person], references: [id], map: "Donation_personId_fkey")
  Version      Version      @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model Member {
  id                  Int        @id @unique @default(autoincrement())
  created_at          DateTime   @default(now()) @db.Timestamptz(3)
  updated_at          DateTime   @updatedAt @db.Timestamptz(3)
  version             String     @default("v1") @db.VarChar
  allergies           String?
  complications       String?
  medications         String?
  blood_disorders     String?
  club_id             Int?
  infectious_diseases String?
  last_blood_donation DateTime?  @db.Timestamptz(3)
  medical_conditions  String?
  person_id           Int?
  Donation            Donation[]
  Club                Club?      @relation(fields: [club_id], references: [id])
  Person              Person?    @relation(fields: [person_id], references: [id])
  Version             Version    @relation(fields: [version], references: [slug], onDelete: NoAction)
  Request             Request[]
}

model Request {
  id               Int        @id @unique @default(autoincrement())
  created_at       DateTime   @default(now()) @db.Timestamptz(3)
  updated_at       DateTime   @updatedAt @db.Timestamptz(3)
  health_issue     String     @db.VarChar(255)
  blood_group      BloodGroup @default(A_POS)
  quantity         Int        @default(1)
  donation_type    String     @db.VarChar(30)
  datetime         DateTime   @default(now()) @db.Timestamptz(3)
  hospital_name    String     @db.VarChar(255)
  hospital_address String     @db.VarChar(255)
  hospital_phone   String     @db.VarChar(255)
  hospital_email   String     @db.VarChar(255)
  version          String     @default("v1") @db.VarChar
  memberId         Int?
  personId         Int
  referral         Member?    @relation(fields: [memberId], references: [id])
  patient          Person     @relation(fields: [personId], references: [id])
  Version          Version    @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model Support {
  id             Int              @id @unique @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(3)
  updated_at     DateTime         @updatedAt @db.Timestamptz(3)
  version        String           @default("v1") @db.VarChar
  organization   Int
  messages       String?          @db.VarChar(255)
  status         String?          @db.VarChar(10)
  priority       Int
  subject        String?          @db.VarChar(255)
  Organization   Organization     @relation(fields: [organization], references: [id], map: "Support_organizationId_fkey")
  Version        Version          @relation(fields: [version], references: [slug], onDelete: NoAction)
  SupportMessage SupportMessage[]
}

model Team {
  id                          Int          @id @unique @default(autoincrement())
  created_at                  DateTime     @default(now()) @db.Timestamptz(3)
  updated_at                  DateTime     @updatedAt @db.Timestamptz(3)
  started_at                  DateTime     @db.Timestamptz(3)
  ended_at                    DateTime     @db.Timestamptz(3)
  organization                Int
  version                     String       @default("v1") @db.VarChar
  members                     Int
  status                      String       @db.VarChar
  Person                      Person[]
  Person_Team_membersToPerson Person       @relation("Team_membersToPerson", fields: [members], references: [id], onDelete: NoAction)
  Organization                Organization @relation(fields: [organization], references: [id], map: "Team_organizationId_fkey")
  Version                     Version      @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model User {
  id                Int                @id @default(autoincrement())
  username          String?            @unique @db.VarChar
  email             String             @unique @db.VarChar
  password          String
  status            AccountStatus      @default(PENDING)
  ip                String             @db.VarChar
  two_factor_auth   Int
  social_login      Int
  logins            Int
  person            Int
  settings          Int
  version           String             @default("v1") @db.VarChar
  created_at        DateTime           @default(now()) @db.Timestamptz(3)
  updated_at        DateTime           @updatedAt @db.Timestamptz(3)
  securityQuestions SecurityQuestion[]
  LoginRecord       LoginRecord        @relation(fields: [logins], references: [id], onDelete: SetNull, map: "User_loginRecordId_fkey")
  Person            Person             @relation(fields: [person], references: [id], map: "User_personId_fkey")
  SocialMediaLinks  SocialMediaLinks   @relation(fields: [social_login], references: [id], onDelete: SetNull, map: "User_socialMediaLinksId_fkey")
  TwoFactorAuth     TwoFactorAuth      @relation(fields: [two_factor_auth], references: [id], onDelete: SetNull, map: "User_twoFactorAuthId_fkey")
  UserSettings      UserSettings       @relation(fields: [settings], references: [id], map: "User_userSettingsId_fkey")
  Version           Version            @relation(fields: [version], references: [slug], onDelete: NoAction)
  role              UserRole[]
}

model SecurityQuestion {
  id         Int      @id @unique @default(autoincrement())
  question   String
  answer     String
  userId     Int
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)
  version    String   @default("v1") @db.VarChar
  user       User     @relation(fields: [userId], references: [id])
  Version    Version  @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model UserRole {
  id         Int      @id @unique @default(autoincrement())
  name       String   @default("user") @db.VarChar
  userId     Int
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)
  version    String   @default("v1") @db.VarChar
  User       User     @relation(fields: [userId], references: [id])
  Version    Version  @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model TwoFactorAuth {
  id         Int      @id @unique @default(autoincrement())
  isEnabled  Boolean
  secretKey  String?
  userId     Int
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)
  version    String   @default("v1") @db.VarChar
  Version    Version  @relation(fields: [version], references: [slug], onDelete: NoAction)
  User       User[]
}

model SocialMediaLinks {
  id         Int      @id @unique @default(autoincrement())
  facebook   String?
  twitter    String?
  instagram  String?
  userId     Int
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)
  version    String   @default("v1") @db.VarChar
  Version    Version  @relation(fields: [version], references: [slug], onDelete: NoAction)
  User       User[]
}

model LoginRecord {
  id                   Int                    @id @unique @default(autoincrement())
  user                 Int
  ip_address           String                 @db.VarChar
  user_agent           String                 @db.VarChar
  login_status         String                 @db.VarChar
  session_id           String?
  location             String?                @db.VarChar
  authentication       AuthenticationMethod?
  security_tokens      String?
  logout_timestamp     DateTime?              @db.Timestamptz(3)
  version              String                 @default("v1") @db.VarChar
  created_at           DateTime               @default(now()) @db.Timestamptz(3)
  updated_at           DateTime               @updatedAt @db.Timestamptz(3)
  devices              Int?
  Device               Device?                @relation(fields: [devices], references: [id], onDelete: NoAction)
  Version              Version                @relation(fields: [version], references: [slug], onDelete: NoAction)
  OrganizationSettings OrganizationSettings[]
  User                 User[]
  UserSettings         UserSettings[]
}

model Person {
  id                              Int              @id @unique @default(autoincrement())
  created_at                      DateTime         @default(now()) @db.Timestamptz(3)
  updated_at                      DateTime         @updatedAt @db.Timestamptz(3)
  first_name                      String           @db.VarChar(100)
  last_name                       String?          @db.VarChar(255)
  father_name                     String?          @db.VarChar(100)
  mother_name                     String?          @db.VarChar(100)
  profession                      String?          @db.VarChar(52)
  dob                             DateTime?
  gender                          Gender?
  version                         String           @default("v1") @db.VarChar
  avatar                          String?
  contact_id                      Int
  teamId                          Int?
  bid                             String?          @db.VarChar(52)
  driving                         String?          @db.VarChar(52)
  nid                             String?          @db.VarChar(52)
  passport                        String?          @db.VarChar(52)
  Ambulance                       Ambulance[]
  BloodCenter                     BloodCenter[]
  Club_Club_chairmanToPerson      Club[]           @relation("Club_chairmanToPerson")
  Club_Club_founderToPerson       Club[]           @relation("Club_founderToPerson")
  Club_Club_vice_chairmanToPerson Club[]           @relation("Club_vice_chairmanToPerson")
  Contact_Contact_personToPerson  Contact[]        @relation("Contact_personToPerson")
  Donation                        Donation[]
  Member                          Member[]
  Organization                    Organization[]
  contact                         Contact          @relation(fields: [contact_id], references: [id])
  Team                            Team?            @relation(fields: [teamId], references: [id])
  Version                         Version          @relation(fields: [version], references: [slug], onDelete: NoAction)
  Request                         Request[]
  SupportMessage                  SupportMessage[]
  Team_Team_membersToPerson       Team[]           @relation("Team_membersToPerson")
  User                            User[]
}

model Hospital {
  id                                 Int           @id @unique @default(autoincrement())
  created_at                         DateTime      @default(now()) @db.Timestamptz(3)
  updated_at                         DateTime      @updatedAt @db.Timestamptz(3)
  name                               String        @db.VarChar(255)
  founded_at                         DateTime      @map("founded_at") @db.Timestamptz(3)
  accreditation                      String?       @db.VarChar(255)
  bed_count                          Int?
  emergency_room                     Boolean?
  services                           String[]
  specialties                        String[]
  rating                             Float?
  facility_type                      FacilityType?
  ownership                          String?       @db.VarChar(255)
  insurance_accepted                 String?       @db.VarChar(255)
  operating_hours                    String?
  infrastructure                     String?
  security_controls                  String?
  version                            String        @default("v1") @db.VarChar
  location                           Int?
  contact                            Int?
  founder                            Int?
  director                           Int?
  chairman                           Int?
  Contact_Contact_hospitalToHospital Contact[]     @relation("Contact_hospitalToHospital")
  Contact_Hospital_contactToContact  Contact?      @relation("Hospital_contactToContact", fields: [contact], references: [id], map: "Hospital_contact_id_fkey")
  Location                           Location?     @relation(fields: [location], references: [id], map: "Hospital_location_id_fkey")
  Version                            Version       @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model UserSettings {
  id                     Int         @id @unique @default(autoincrement())
  created_at             DateTime    @default(now()) @db.Timestamptz(3)
  updated_at             DateTime    @updatedAt @db.Timestamptz(3)
  language               Language    @default(ENGLISH)
  time_format            TimeFormat  @default(H12PM)
  date_format            DateFormat  @default(DY_MONTH_COMMA)
  timezone               Timezone    @default(GMT_06_Astana_Dhaka_Almaty_Urumqi)
  theme                  Theme?      @default(LIGHT)
  email_notifications    Boolean     @default(true)
  phone_notification     Boolean     @default(true)
  push_notifications     Boolean     @default(true)
  two_factor_auth        Boolean?
  login_record_id        Int
  loginRecordId          Int
  high_contrast_mode     Boolean?
  in_app_notifications   Boolean?    @default(true)
  key_board_shortcut     Boolean?
  notification_frequency String?
  notification_sound     String?
  notification_vibrate   Boolean?    @default(true)
  password_reset         Boolean?
  security_answer        String?     @db.VarChar(255)
  security_question      String?     @db.VarChar(255)
  version                String      @default("v1") @db.VarChar
  User                   User[]
  login_records          LoginRecord @relation(fields: [loginRecordId], references: [id])
  Version                Version     @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model OrganizationSettings {
  id                     Int            @id @unique @default(autoincrement())
  created_at             DateTime       @default(now()) @db.Timestamptz(3)
  updated_at             DateTime       @updatedAt @db.Timestamptz(3)
  language               Language       @default(ENGLISH)
  time_format            TimeFormat     @default(H12PM)
  date_format            DateFormat     @default(DY_MONTH_COMMA)
  timezone               Timezone       @default(GMT_06_Astana_Dhaka_Almaty_Urumqi)
  theme                  Theme?         @default(LIGHT)
  email_notifications    Boolean        @default(true)
  phone_notification     Boolean        @default(true)
  push_notifications     Boolean        @default(true)
  two_factor_auth        Boolean?
  loginRecordId          Int?
  accountDeactivation    Boolean?
  avatar                 String?
  clearBrowsingData      Boolean?
  contactSupportLink     String?
  dataRetentionDays      Int?
  dataSharing            Boolean?
  helpCenterLink         String?
  high_contrast_mode     Boolean?
  in_app_notifications   Boolean?       @default(true)
  key_board_shortcut     Boolean?
  notification_frequency String?
  notification_sound     String?
  notification_vibrate   Boolean?       @default(true)
  password_reset         Boolean?
  security_answer        String?
  security_question      String?
  username               String?        @db.VarChar(100)
  version                String         @default("v1") @db.VarChar
  Organization           Organization[]
  LoginRecord            LoginRecord?   @relation(fields: [loginRecordId], references: [id])
  Version                Version        @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model Organization {
  id                     Int                  @id @unique @default(autoincrement())
  created_at             DateTime             @default(now()) @db.Timestamptz(3)
  updated_at             DateTime             @updatedAt @db.Timestamptz(3)
  org_type               OrgType
  org_id                 Int
  Volunteer              Json
  personId               Int
  organizationSettingsId Int
  clubId                 Int?
  version                String               @default("v1") @db.VarChar
  Ambulance              Ambulance[]
  Donation               Donation[]
  Club                   Club?                @relation(fields: [clubId], references: [id])
  settings               OrganizationSettings @relation(fields: [organizationSettingsId], references: [id])
  Ambassador             Person               @relation(fields: [personId], references: [id])
  Version                Version              @relation(fields: [version], references: [slug], onDelete: NoAction)
  Support                Support[]
  SupportMessage         SupportMessage[]
  Team                   Team[]
}

model SupportMessage {
  id           Int          @id @unique
  created_at   DateTime     @db.Timestamptz(6)
  updated_at   DateTime     @db.Timestamptz(6)
  organization Int
  support      Int
  message      String
  author       Int
  version      String       @default("v1") @db.VarChar
  Person       Person       @relation(fields: [author], references: [id], onDelete: NoAction)
  Organization Organization @relation(fields: [organization], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Support      Support      @relation(fields: [support], references: [id], onDelete: NoAction)
  Version      Version      @relation(fields: [version], references: [slug], onDelete: NoAction)
}

model Version {
  id                                   Int                    @unique
  slug                                 String                 @unique @db.VarChar
  title                                String                 @db.VarChar(255)
  description                          String?
  created_at                           DateTime               @db.Timetz(6)
  updated_at                           DateTime               @updatedAt @db.Timetz(6)
  version                              String?                @db.VarChar
  Ambulance_Ambulance_versionToVersion Ambulance[]            @relation("Ambulance_versionToVersion")
  BloodCenter                          BloodCenter[]
  Club                                 Club[]
  Contact                              Contact[]
  Country                              Country[]
  Device                               Device[]
  Donation                             Donation[]
  Hospital                             Hospital[]
  Location                             Location[]
  LoginRecord                          LoginRecord[]
  Member                               Member[]
  Organization                         Organization[]
  OrganizationSettings                 OrganizationSettings[]
  Person                               Person[]
  Request                              Request[]
  SecurityQuestion                     SecurityQuestion[]
  SocialMediaLinks                     SocialMediaLinks[]
  Support                              Support[]
  SupportMessage                       SupportMessage[]
  Team                                 Team[]
  TwoFactorAuth                        TwoFactorAuth[]
  User                                 User[]
  UserRole                             UserRole[]
  UserSettings                         UserSettings[]

  @@id([id, slug])
}

model Device {
  id           Int           @id
  created_at   DateTime?     @db.Timetz(6)
  updated_at   DateTime?     @db.Timetz(6)
  name         String?       @db.VarChar
  mac_address  String?       @db.VarChar
  model        String?       @db.VarChar
  os           String?       @db.VarChar
  os_version   String?       @db.VarChar
  device_id    String?       @db.VarChar
  brand        String?       @db.VarChar
  manufacturer String?       @db.VarChar
  version      String        @db.VarChar
  Version      Version       @relation(fields: [version], references: [slug], onDelete: NoAction)
  LoginRecord  LoginRecord[]
}

enum Gender {
  FEMALE
  MALE
  TRANS
}

enum FacilityType {
  HOSPITAL
  CLINIC
  OTHER
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum AuthenticationMethod {
  PASSWORD
  TWO_FACTOR_AUTH
  FACEBOOK
  TWITTER
}

enum Theme {
  LIGHT
  DARK
}

enum Language {
  ENGLISH
  BANGLA
}

enum TimeFormat {
  H12AM
  H12PM
  H24
  H24S
  H12NoS
  H24NoS
  H12S_AM
  H12S_PM
  H24S_AM
  H24S_PM
}

enum DateFormat {
  YMD_HYPHEN
  DMY_HYPHEN
  MDY_SLASH
  DMY_SLASH
  MON_DY_COMMA
  DY_MON_COMMA
  MONTH_DY_COMMA
  DY_MONTH_COMMA
  MON_DY_SPACE
  DY_MON_SPACE
}

enum Timezone {
  GMT_10_Hawaii
  GMT_09_Alaska
  GMT_08_Pacific_Time_US_Canada
  GMT_07_Mountain_Time_US_Canada
  GMT_06_Central_Time_US_Canada_Mexico_City
  GMT_05_Eastern_Time_US_Canada_Bogota_Lima
  GMT_04_Atlantic_Time_Canada_Caracas_La_Paz
  GMT_03_30_Newfoundland
  GMT_03_Buenos_Aires_Brasilia_Georgetown
  GMT_02_Mid_Atlantic
  GMT_01_Azores_Cape_Verde_Islands
  GMT_00_Western_Europe_Time_London_Lisbon_Casablanca
  GMT_01_Brussels_Copenhagen_Madrid_Paris
  GMT_02_Athens_Bucharest_Istanbul
  GMT_03_Moscow_St_Petersburg_Kuwait_Nairobi
  GMT_03_30_Tehran
  GMT_04_Abu_Dhabi_Muscat_Baku_Tbilisi
  GMT_04_30_Kabul
  GMT_05_Ekaterinburg_Islamabad_Karachi_Tashkent
  GMT_05_30_Chennai_Kolkata_Mumbai_New_Delhi
  GMT_05_45_Kathmandu
  GMT_06_Astana_Dhaka_Almaty_Urumqi
  GMT_06_30_Yangon_Cocos_Islands
  GMT_07_Bangkok_Hanoi_Jakarta
  GMT_08_Beijing_Perth_Singapore_Hong_Kong
  GMT_09_Tokyo_Seoul_Osaka_Sapporo_Yakutsk
  GMT_09_30_Adelaide_Darwin
  GMT_10_Eastern_Australia_Guam_Vladivostok
  GMT_11_Magadan_Solomon_Islands_New_Caledonia
  GMT_12_Auckland_Wellington_Fiji_Kamchatka
  GMT_13_Nuku_alofa
}

enum OrgType {
  HOSPITAL
  CLUB
  CENTER
}
